
security.oauth2.client.client-id=localhost
security.oauth2.client.client-secret=xxx
security.oauth2.client.scope=openid
security.oauth2.client.registered-redirect-uri=http://host.docker.internal/authenticate
security.oauth2.client.user-authorization-uri=http://host.docker.internal/oidc/authorize
security.oauth2.client.access-token-uri=http://host.docker.internal/oidc/token
security.oauth2.resource.jwk.key-set-uri=http://host.docker.internal/oidc/jwks
security.allowlist.jwt=ruuter,resql,resql_users,tim,tim-postgresql,node_server,data_mapper,gui_dev,127.0.0.1,::1


frontpage.redirect.url=http://localhost

logging.level.root=info

spring.datasource.url=jdbc:postgresql://host.docker.internal:9876/tim
spring.datasource.username=tim
spring.datasource.password=123
spring.datasource.driver-class-name=org.postgresql.Driver
spring.liquibase.change-log=classpath:master.xml

spring.profiles.active=dev

#legacy integration properties

#this defines the name of the cookie to write the sessionId into
#how long the legacy session will last
legacy-portal-integration.sessionCookieName=PHPSESSID
# this should match the legacy cookie domain name
legacy-portal-integration.sessionCookieDomain=localhost
#is TARA auth module deployed on the same domain as legacy portal?
# should be set to false only in development mode
legacy-portal-integration.taraAuthDeployedOnLegacyDomain=true
#Note! this also affects the JWT timeout periodv
legacy-portal-integration.sessionTimeoutMinutes=30
legacy-portal-integration.requestIpHeader=X-FORWARDED-FOR
legacy-portal-integration.requestIpAttribute=request_ip
legacy-portal-integration.redirectUrlHeader=Referer
legacy-portal-integration.redirectUrlAttribute=url_redirect
# Marker to determine if the user should be redirected back to legacy portal or not
# Marker is searched in the Referer HTTP header
legacy-portal-integration.legacyPortalRefererMarker=http://localhost
# Location of legacy portal to redirect to, in case legacyPortalRefererMarker gives a positive match
legacy-portal-integration.legacyUrl=

# JWT configuration properties
# location of the private key that will be used for signing JWT tokens


# to generate the key and the keystore use:
# keytool -genkeypair -keyalg rsa -keysize 2048 -alias jwtsign -keystore jwtkeystore.jks
# NB! password for both keystore and alias should be the same
jwt-integration.signature.key-store=classpath:jwtkeystore.jks
jwt-integration.signature.key-store-password=ppjjpp
jwt-integration.signature.keyStoreType=JKS
jwt-integration.signature.keyAlias=jwtsign
#Jwt issuer property
jwt-integration.signature.issuer=localhost
#Jwt cookie name property
jwt-integration.signature.cookieName=JWTTOKEN


userIPHeaderName = x-forwarded-for
#append a whitespace character at the end of prefix (before newline) if you want it to be separate from main message body
userIPLoggingPrefix = from IP 
userIPLoggingMDCkey = userIP

headers.contentSecurityPolicy=default-src 'self'

server.port=8085
